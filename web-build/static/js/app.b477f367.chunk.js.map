{"version":3,"sources":["BasicComponents/StyleSheet.tsx","BasicComponents/BasicComponent.tsx","Project1-GitUtil-Reimbursement/Types/Enums.ts","components/wrappers/wProviderWrapper.tsx","Project1-GitUtil-Reimbursement/Classes/HTTPRequestHandler.ts","components/element/eNavigationBar.tsx","components/panels/homepage/pUserProfile.tsx","components/element/eRequestSelectButton.tsx","components/panels/homepage/pRequestView.tsx","components/panels/homepage/pRequestCreation.tsx","components/panels/homepage/pDisplayRecords.tsx","components/adminTools/AdminNavBar.tsx","components/adminTools/AdminPage.tsx","components/page/HomePage.tsx","components/page/NoConnectionScreen.tsx","components/panels/signin/pCreateProfileScreen.tsx","components/panels/signin/pLoginScreen.tsx","components/wrappers/wSigninSwitcher.tsx","components/wrappers/wConnectionSwitcher.tsx","App.tsx"],"names":["theme","textType","buttonType","InputTextType","TextStyle","type","PageTitle","fontSize","color","HeaderSection","GeneralText","InputText","ButtonColor","normal","exist","adminStyle","inputField","InputTextComponentStyle","height","margin","borderWidth","iTSB","backgroundColor","StyleText","text","View","style","padding","Text","StyleButton","func","enabled","Button","onPress","e","error","console","log","title","disabled","StyleInputText","onChangeText","Label","textValue","ShowSubmit","subFunc","ShowSubmitButton","flex","flexDirection","TextInput","value","RequestStatus","HTTPCommands","HTTPRequestErrorFlag","SysReducerAction","HTTPRequestHandler","InputURL","InitUsePort","InputPortNumber","AuthenticationString","UserID","this","PortNumber","UsePort","length","TargetURL","Authentication","Error","Command","ID","CreateProfile","Login","LogOut","ChangeFirstName","ChangeLastName","ChangePassword","GetManageName","MakeRequest","DeleteRequest","GetAllSentRequest","ManageChangeRequest","ManagerGetAllRequest","AdminGetAllEmployees","AdminAssignManager","AdminRemoveEmployee","AdminDeleteProfile","GetRecords","CheckAdminPermissions","CheckManagerPermissions","constructURLPrefect","GetRoute","body","Axios","post","CreateURL","patch","get","delete","a","async","status","password","CreateHTTPRequest","JsonBody","data","LoginResult","ReturnProfile","id","result","ResultCheck","EmployeeID","ManagerID","AdminID","ProfileInit","RequestID","Type","Message","Denied","Approved","ReturnString","Pending","ResultReturnRequest","ReturnRecord","LoginFound","JSON","stringify","NewFirstName","ResultReturnString","NewLastName","NewPassword","Amount","authenticationString","ResultReturn","IDstring","contextValue","HTTPHandler","readUserProfile","FirstName","LastName","setUserProfile","SetHTTPHandler","sysContext","React","createContext","SuperProvider","children","useState","readState","Provider","NavigationBar","props","setActiveTab","setFunc","level","setPermissionLevel","FoundContext","useContext","useEffect","ShowManagerOpts","ShowAdminOpt","UserProfile","getProfileValues","managerName","setManagerName","firstName","setFirstName","lastName","setLastName","setPassword","Password","GetManagerName","Result","TempHelper","TryLogin","ResultString","changeFirstName","changeLastName","changePassword","RequestSelectButton","InputRequest","All","setSetRequest","DisplayRequestButtons","ManagerMode","modalVisible","setModalVisible","sendMessage","setSendMessage","ConvertPostedDate","Date","PostDate","toLocaleDateString","grabStatus","Modal","animationType","transparent","visible","onRequestClose","Alert","alert","styles","justifyContent","alignItems","ModifiedDate","InputMessage","ManagerMessage","ManagerChangeRequest","ReturnRequest","DenyRequest","AcceptRequest","RequestView","RequestType","ButtonDisplay","setButtonDisplay","transferArray","GetAllSentRequestOfType","ReturnRequestArray","map","v4","ScrollView","scrollView","container","paddingTop","StatusBar","currentHeight","marginHorizontal","RequestCreation","RequestAmount","setStateAmount","RequestMessage","setRequestMessage","ShowUpdateScreen","setShowUpdateScreen","SendEnabled","setSendEnabled","ConvertAmountToText","ss","Number","setTimeout","NaN","String","RequestCreateView","DisplayRecords","EntryDisplay","setEntry","ManagerGetRecords","ReturnRecords","AdminNavBar","setAdminIndex","AdminPage","HomePage","pageTitle","setPageTitle","ActiveTab","index","switchActiveTable","NoConnectionScreen","CreateProfileScreen","dispatchCreateScreen","dispatch","userPassword","setStatePassword","userName","setStateUserName","userFirstName","setStateFirstName","userLastName","setStateLastName","InitProfile","TryCreateProfile","LoginScreen","reducer","State","action","SignInSwitcher","useReducer","isCreateScreen","ConnectionSwitcher","isConnected","setConnected","CheckConnection","checkConnection","switchPage","App","StyleSheet","create"],"mappings":"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","file":"static/js/app.b477f367.chunk.js","sourcesContent":["import { StatusBar } from \"react-native\"\r\n\r\nexport enum theme{\r\n    default,\r\n    light\r\n}\r\n\r\n//==========================================\r\nexport enum textType{\r\n    PageTitle,\r\n    HeaderSection,\r\n    GeneralText,\r\n    InputText\r\n}\r\nexport function TextStyle(type:textType){\r\n    switch(type){\r\n        case textType.PageTitle:        {return { fontSize:100, color:\"floralwhite\" } }\r\n        case textType.HeaderSection:        {return { fontSize:40, color:\"floralwhite\" } }\r\n        case textType.GeneralText:          {return { fontSize:30, color:\"floralwhite\" } }\r\n        case textType.InputText:            {return { fontSize:30, color:\"floralwhite\" } }\r\n        default:                            {return { fontSize:70, color:\"floralwhite\" } }\r\n    }\r\n}\r\n//==========================================\r\nexport enum buttonType{\r\n    normal,\r\n    exist,\r\n    adminStyle,\r\n    inputField\r\n}\r\nexport function ButtonColor(type: buttonType){\r\n    switch(type){\r\n        case buttonType.normal:         { return `#2196F3`}\r\n        case buttonType.exist:         { return `#FF0000`}\r\n        case buttonType.adminStyle:         { return `#FFaa22`}\r\n        case buttonType.inputField:         { return `#222222`}\r\n        default:                        { return `#2196F3`}\r\n    }\r\n\r\n}\r\n//==========================================\r\nexport enum InputTextType{\r\n    normal\r\n}\r\nexport function InputTextComponentStyle(type:InputTextType){\r\n    switch(type){\r\n        case InputTextType.normal:      { return { height: 35, margin: 2, borderWidth: 1, fontSize:30, color:\"floralwhite\" }}\r\n    }\r\n}\r\n//==========================================\r\nexport function iTSB(type:InputTextType){\r\n    switch(type){\r\n        case InputTextType.normal:  {return {backgroundColor:\"#333333\"}}\r\n        default:                    {return {backgroundColor:\"#333333\"}}\r\n    }\r\n}\r\n\r\n\r\n","import { ButtonColor, buttonType, InputTextComponentStyle, InputTextType, TextStyle, textType, iTSB} from \"./StyleSheet\";\r\nimport { View, Text, Button, TextInput, SafeAreaView } from \"react-native\";\r\n\r\nexport function StyleText(text:string,type:textType =textType.GeneralText  ){\r\n    return( <View style={[{padding: 3}]} ><Text style={ TextStyle(type)}>{text}</Text></View>)\r\n}\r\n\r\nexport function StyleButton(func:Function, text:string,type:buttonType =buttonType.normal, enabled:boolean = true ){\r\n    return (<View  style={[{padding: 3}]} ><Button onPress={(e)=> {\r\n        try {\r\n            func(e)\r\n        } catch (error) {\r\n            console.log(` the current function input for this button is not callable ${func}`)\r\n        }}\r\n    } title={text} color={ButtonColor(type)}  disabled={!enabled}/></View>)\r\n}\r\n\r\nexport function StyleInputText(onChangeText:Function,Label:string,textValue:string, ShowSubmit:boolean = false, subFunc?:Function ,type:InputTextType=InputTextType.normal){\r\n    function ShowSubmitButton(){\r\n        if(ShowSubmit)  { return <View style={{flex:1}}> {StyleButton(subFunc, 'Submit', buttonType.inputField )} </View> }\r\n    }\r\n\r\n    return (\r\n        <View style={[{padding: 3}]}> \r\n            <View style={[ {flexDirection: \"row\", }, iTSB(type)]}>\r\n                <View  style={{flex:2}}> {StyleText(Label,textType.InputText )}</View>\r\n                <View  style={[{flex:4, padding: 4}]}> <TextInput  style={ InputTextComponentStyle(type)}  onChangeText={(e)=>onChangeText(e)} value={textValue}/></View>\r\n                {ShowSubmitButton()}\r\n            </View>\r\n        </View>\r\n        \r\n    )\r\n}","\r\n// used for determining the status of a Reimbursement request\r\nexport enum RequestStatus{\r\n    Pending,\r\n    Denied,\r\n    Approved,\r\n    deleted,\r\n    All\r\n}\r\n\r\nexport enum HTTPCommands{\r\n    CreateProfile,\r\n    Login,\r\n    LogOut,\r\n    ChangeFirstName,\r\n    ChangeLastName,\r\n    ChangePassword,\r\n    GetManageName,\r\n    MakeRequest,\r\n    DeleteRequest,\r\n    GetAllSentRequest,\r\n    ManageChangeRequest,\r\n    ManagerGetAllRequest,\r\n    AdminGetAllEmployees,\r\n    AdminAssignManager,\r\n    AdminRemoveEmployee,\r\n    AdminDeleteProfile,\r\n    GetRecords,\r\n    CheckAdminPermissions,\r\n    CheckManagerPermissions\r\n}\r\n\r\n// used for indicating switch codes for communicating over http\r\nexport enum HTTPRequestErrorFlag{\r\n    /**0 used tp verify first and last name length*/\r\n    NameToShort,\r\n    /**1 used to verify first and last name illegal character usage*/\r\n    NameCharError,\r\n    /**2 used to verify password criteria*/\r\n    PasswordInitError,\r\n    /**3  used if the manager does not exist when first creating a profile*/\r\n    InitManagerNotExist,\r\n    /**4   used if any employee listed is not found on the server when trying create a profile*/\r\n    InitEmployeeError,\r\n    /**5 used to indicate that the server failed to create a profile*/\r\n    ProfileServerCreationError, \r\n    /**6 Used to indicate that the first and last name used to generate an initial id already exist*/\r\n    ProfileAlreadyExist,\r\n    /**7 used to indicate that the manager ID request could not be found when searching for a name*/\r\n    ManagerNameNotFound,\r\n    /**8 used to indicate that the employee ID sent does not correspond to a manager, the ID may still be a valid employee*/\r\n    NotAManager,\r\n    /**9 Used as a general notification that the given employee ID does not exist does not exist on in the database*/\r\n    EmployeeNotFoundGeneral,\r\n    /**10 used when the server fails to create a request*/\r\n    RequestCreationError,\r\n    /**11 Used when the Server is having problems updating a profile*/\r\n    ProfileUpdateError,\r\n    /**12 Used to indicate that the server could not find the request*/\r\n    RequestNotFound,\r\n    /**13 Used to indicate that the server could not update the request*/\r\n    RequestUpdateError,\r\n    /**14 Used to indicate that the employee does not have access to the request*/\r\n    EmployeeRequestAccessError,\r\n    /**15 Used to indicate that the server failed to delete a request*/\r\n    RequestDeletionError,\r\n    /**16 Used to indicate that a filter request type was denied*/\r\n    RequestFilterDenied,\r\n    /**17 used to identity that a request was previously approved and denied and can no longer be marked for as deleted*/\r\n    RequestChangeStatusError,\r\n    /**18 used to indicated that a manager can't mark employees request as deleted*/\r\n    RequestManagerDeleteError,\r\n    /**18 used to indicated that a manager can't mark employees request as all*/\r\n    RequestManagerInvalidType,\r\n    /**19 used when a manager does not have privileges to edit a request*/\r\n    ManagerNotValidPrivileges,\r\n    /**20 used to indicate that the employee to assign is not found*/\r\n    EmployeeAssignmentError,\r\n    /**21 used to indicate that the manager to assign is not found*/\r\n    ManagerAssignmentError,\r\n    /**22 used to indicate that the un-assignment process failed on the server*/\r\n    UnAssignError,\r\n    /**23 used to indicate that the user was not registered for authentication*/\r\n    AuthenticationNotFound,\r\n    /**24 used to indicate that the input authentication string does not match the server string*/\r\n    AuthenticationStringError,\r\n    /**25 used as a default value for the system. THIS SHOULD NOT BE USED*/\r\n    Unknown,\r\n    \r\n\r\n\r\n}","import React, { useReducer, useState } from \"react\";\r\nimport { SafeAreaView } from \"react-native\";\r\nimport HTTPRequestHandler from \"../../Project1-GitUtil-Reimbursement/Classes/HTTPRequestHandler\";\r\nimport {Profile, Request} from '../../Project1-GitUtil-Reimbursement/Types/Entity';\r\n\r\n/** Action for reducer function*/ \r\nexport enum SysReducerAction{\r\n    SetProfile\r\n}\r\n\r\n\r\n\r\n/**Object to content the state, dispatcher and initialized state*/\r\nexport interface ContextObject{\r\n    HTTPHandler:HTTPRequestHandler\r\n    readUserProfile:Profile \r\n    setUserProfile:React.Dispatch<React.SetStateAction<Profile>> \r\n    SetHTTPHandler:React.Dispatch<React.SetStateAction<HTTPRequestHandler>> \r\n}\r\n\r\n\r\n/**used to for default context values; assignment of null just for intellisense*/\r\nconst contextValue: ContextObject = {\r\n    HTTPHandler: new HTTPRequestHandler('',false,3001),\r\n    readUserProfile: {FirstName: \"\",LastName: \"\"},\r\n    setUserProfile: ()=>{},\r\n    SetHTTPHandler: ()=>{},\r\n}\r\nexport const sysContext = React.createContext(contextValue)\r\n\r\n\r\n\r\nexport default function SuperProvider( {children} ){\r\n    const useURL:string ='https://project-one-backend-joshuabednaz.azurewebsites.net';\r\n    const temp:Profile = {FirstName: \"\",LastName: \"\"}\r\n    const [readUserProfile, setUserProfile] = useState(temp)\r\n    const [HTTPHandler, setHTTPHandler] = useState(new HTTPRequestHandler( useURL,false,3001))\r\n    /**re-assignment so typescript is happy assign to 'any'*/\r\n    const readState:ContextObject = {\r\n        HTTPHandler: HTTPHandler,\r\n        readUserProfile,\r\n        setUserProfile: setUserProfile,\r\n        SetHTTPHandler: setHTTPHandler\r\n    };\r\n\r\n\r\n    return(<>\r\n        <sysContext.Provider value = { {...readState} }>\r\n                {children}\r\n        </sysContext.Provider>\r\n    \r\n    </>)\r\n\r\n\r\n}","import { HTTPCommands, RequestStatus } from \"../Types/Enums\";\r\nimport  Axios, { AxiosResponse }  from \"axios\";\r\nimport { AdminHTTPCLInterface, LogHTTPCInterface, ManagerHTTPCLInterface, ProfileHTTPCInterface } from \"../Types/HTTPCommands\";\r\nimport { HTTPCreateProfile, Profile, Request } from \"../Types/Entity\";\r\nimport { LoginReturn, MakeRequestForm, ResultReturnCheck, ResultReturnMarkRequest, ResultReturnString, TransferProfile, TransferProfileArray, TransferRecords, TransferRequest, TransferRequestArray } from \"../Types/dto\";\r\nimport {ResultReturnStringID} from '../Types/dto';\r\n\r\n\r\nexport default class  HTTPRequestHandler implements ProfileHTTPCInterface, ManagerHTTPCLInterface, AdminHTTPCLInterface, LogHTTPCInterface{\r\n    // Unused =========================================================\r\n    CheckCreds(UserID: string, Authentication: string): boolean {\r\n        throw new Error(\"Not a useable outside of the server\");\r\n    }// Not Used ======================================================\r\n\r\n    private PortNumber: number;\r\n    private TargetURL: string;\r\n    private AuthenticationString:string ='';\r\n    private UserID:string = '';\r\n    private UsePort:boolean;\r\n    constructor(InputURL:string, InitUsePort:boolean,InputPortNumber:number=3001){\r\n        this.PortNumber = InputPortNumber ?? 3001 ;\r\n        this.UsePort=InitUsePort;\r\n        if(InputURL?.length>1) {this.TargetURL =  InputURL}\r\n        else{this.TargetURL = 'http://localhost'}\r\n    }\r\n    // Internal Commands ===============================================\r\n    private GetRoute(Command:HTTPCommands, ID:string){\r\n        switch(Command){\r\n            case HTTPCommands.CreateProfile:            { return `/Create`;}\r\n            case HTTPCommands.Login:                    { return `/Login/${ID}`;}\r\n            case HTTPCommands.LogOut:                   { return `/LogOut/${ID}`;}\r\n            case HTTPCommands.ChangeFirstName:          { return `/Profile/${ID}/ChangeFirst`;}\r\n            case HTTPCommands.ChangeLastName:           { return `/Profile/${ID}/ChangeLast`;}\r\n            case HTTPCommands.ChangePassword:           { return `/Profile/${ID}/ChangePassword`;}\r\n            case HTTPCommands.GetManageName:            { return `/Profile/${ID}/Manager`;}\r\n            case HTTPCommands.MakeRequest:              { return `/Request/${ID}`;}\r\n            case HTTPCommands.DeleteRequest:            { return `/Request/${ID}`;}\r\n            case HTTPCommands.GetAllSentRequest:        { return `/Request/${ID}`;}\r\n            case HTTPCommands.ManageChangeRequest:      { return `/Manager/${ID}`;}\r\n            case HTTPCommands.ManagerGetAllRequest:     { return `/Manager/${ID}`;}\r\n            case HTTPCommands.AdminGetAllEmployees:     { return `/Admin/${ID}`;}\r\n            case HTTPCommands.AdminAssignManager:       { return `/Admin/${ID}/Assign`;}\r\n            case HTTPCommands.AdminRemoveEmployee:      { return `/Admin/${ID}/UnAssign`;}\r\n            case HTTPCommands.AdminDeleteProfile:       { return `/Admin/${ID}`;}\r\n            case HTTPCommands.GetRecords:               { return `/Records`;}\r\n            case HTTPCommands.CheckAdminPermissions:    { return `/CheckAdminPermission/${ID}`;}\r\n            case HTTPCommands.CheckManagerPermissions:  { return `/CheckManagerPermission/${ID}`;}\r\n            default:                                    { return `/Connect`;}\r\n        }\r\n    }\r\n    private constructURLPrefect(){\r\n        if(this.UsePort){ return `${this.TargetURL}:${this.PortNumber}`}\r\n        else{ return `${this.TargetURL}`}\r\n    }\r\n    private CreateURL(Command:HTTPCommands,ID:string):string{\r\n        return `${this.constructURLPrefect()}${this.GetRoute(Command,ID)}`;\r\n    }\r\n    //===================================================================\r\n    private async CreateHTTPRequest(Command:HTTPCommands, body:any, ID:string):Promise<AxiosResponse<any, any>>{\r\n        switch(Command){\r\n            case HTTPCommands.CreateProfile:            { return await Axios.post   (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.Login:                    { return await Axios.post   (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.LogOut:                   { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ChangeFirstName:          { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ChangeLastName:           { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ChangePassword:           { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.GetManageName:            { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.MakeRequest:              { return await Axios.post   (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.DeleteRequest:            { return await Axios.delete (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.GetAllSentRequest:        { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ManageChangeRequest:      { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ManagerGetAllRequest:     { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminGetAllEmployees:     { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminAssignManager:       { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminRemoveEmployee:      { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminDeleteProfile:       { return await Axios.delete (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.GetRecords:               { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.CheckManagerPermissions:  { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.CheckAdminPermissions:    { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            default:                                    { return await Axios.get    (this.CreateURL(5000,ID), body)   ;}\r\n        }\r\n    }\r\n\r\n    \r\n    // Helper Functions==========================================\r\n    /**Used tp check the connection to the server*/\r\n    async CheckConnection():Promise<boolean>{\r\n        try {\r\n            const ReturnStuff = await Axios.get( `${this.constructURLPrefect()}/Connect`);\r\n            if(   ReturnStuff.status <300  ){ return true};\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n        return false ;\r\n    }\r\n    /**Attempts to login the user*/ \r\n    async Login(UserID:string, password:string):Promise<LoginReturn> {\r\n        const Command:HTTPCommands=  HTTPCommands.Login ;\r\n        const body:any = {UserID, password, AuthenticationString:''} ; \r\n        const JsonBody = (await this.CreateHTTPRequest(Command,body, UserID)).data;\r\n        const LoginResult:LoginReturn = JsonBody;\r\n        this.UserID = LoginResult.ReturnProfile?.id ?? 'NullLogin';\r\n        this.AuthenticationString = LoginResult.AuthenticationString ?? '';\r\n        return LoginResult;\r\n        \r\n    }\r\n    /**Attempt to logout the user*/\r\n    async LogOut(UserID?:string, Authentication?:string):Promise<ResultReturnCheck>{\r\n        const body:any =this.AuthenticationString;\r\n        const Command:HTTPCommands=  HTTPCommands.LogOut;\r\n        const JsonBody:ResultReturnCheck = (await this.CreateHTTPRequest(Command,body, this.UserID)).data\r\n        return JsonBody;\r\n    }\r\n\r\n    async CheckManagerPermissions(): Promise<ResultReturnCheck> {\r\n        const Command:HTTPCommands=  HTTPCommands.CheckManagerPermissions\r\n        let body = {}\r\n        let result:ResultReturnCheck;\r\n        try {\r\n            result = (await this.CreateHTTPRequest(Command, body, this.UserID)).data\r\n        } catch (error) {\r\n            result = {ResultCheck:false}\r\n        }\r\n        return result\r\n    }\r\n    async CheckAdminPermissions(): Promise<ResultReturnCheck> {\r\n        const Command:HTTPCommands=  HTTPCommands.CheckAdminPermissions\r\n        let body = {}\r\n        let result:ResultReturnCheck;\r\n        try {\r\n            result = (await this.CreateHTTPRequest(Command, body, this.UserID)).data\r\n        } catch (error) {\r\n            result = {ResultCheck:false}\r\n        }\r\n        return result\r\n    }\r\n    \r\n    async AdminGetAllEmployees():Promise<TransferProfileArray>{\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async AdminAssignManager(EmployeeID:string, ManagerID:string):Promise<ResultReturnCheck>{\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async AdminRemoveEmployeeAssignment(EmployeeID:string, ManagerID:string, AdminID:string):Promise<ResultReturnCheck> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async AdminDeleteProfile(EmployeeID:string):Promise<ResultReturnCheck>  {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    AdminCreateProfile(ProfileInit: HTTPCreateProfile, ManagerID: string): Promise<TransferProfile> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    // Manager functions==================================================================\r\n    async ManagerChangeRequest(ManagerID:string, RequestID:string, Type:RequestStatus, Message:string):Promise<TransferRequest> {\r\n        const Command:HTTPCommands=  HTTPCommands.ManageChangeRequest;\r\n        let body:ResultReturnMarkRequest ;\r\n        switch(Type){\r\n            case RequestStatus.Denied:    { body= { ReturnString:RequestID, Type:RequestStatus.Denied, AuthenticationString: (this.AuthenticationString),Message}; break }\r\n            case RequestStatus.Approved:    {body= { ReturnString:RequestID, Type:RequestStatus.Approved, AuthenticationString: (this.AuthenticationString),Message}; break }\r\n            default:   {  body= { ReturnString:RequestID, Type:RequestStatus.Pending, AuthenticationString: (this.AuthenticationString),Message} ; break }\r\n        }\r\n        const ResultReturnRequest:TransferRequest = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnRequest;\r\n    }\r\n    async ManagerGetAllRequest(ManagerID:string):Promise<TransferRequestArray> {\r\n        const Command:HTTPCommands=  HTTPCommands.ManagerGetAllRequest ;\r\n        const body ={}\r\n        let ResultReturnRequest:TransferRequestArray= (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}`)).data;\r\n        return ResultReturnRequest\r\n    }\r\n    async ManagerGetRecords(): Promise<TransferRecords> {\r\n        const Command:HTTPCommands=  HTTPCommands.GetRecords ;\r\n        const body={};\r\n        const ReturnRecord:TransferRecords= (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ReturnRecord;\r\n    }\r\n    /**Used to initialize a new account and also login the user*/\r\n    async CreateProfile(ProfileInit:HTTPCreateProfile):Promise<LoginReturn> {\r\n        const Command:HTTPCommands=  HTTPCommands.CreateProfile ;\r\n        const body:HTTPCreateProfile = {... ProfileInit} ; \r\n        const LoginFound:LoginReturn = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        console.log( \"Profile Creation return JSON: \",JSON.stringify(LoginFound.ReturnProfile.id));\r\n        this.UserID = LoginFound.ReturnProfile.id ?? ''\r\n        this.AuthenticationString = LoginFound.AuthenticationString?? ''\r\n        return LoginFound;\r\n    }\r\n    /**Used to change first name*/\r\n    async ChangeFirstName( NewFirstName:string, EmployeeID?:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.ChangeFirstName ;\r\n        const body:ResultReturnStringID = {ReturnString:NewFirstName, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    /**Use tp change last name*/\r\n    async ChangeLastName( NewLastName:string, EmployeeID?:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.ChangeLastName ;\r\n        const body:ResultReturnStringID = {ReturnString: NewLastName, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    /**Used to change password*/\r\n    async ChangePassword(NewPassword:string, EmployeeID?:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.ChangeLastName ;\r\n        const body:ResultReturnStringID = {ReturnString: NewPassword, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    /**Use to get manager name*/\r\n    async GetManagerName(ManagerID:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.GetManageName;\r\n        const body:ResultReturnStringID = {ReturnString: ManagerID, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    async MakeRequest(EmployeeID:string, Amount:number, Message:string):Promise<TransferRequest> {\r\n        const Command:HTTPCommands=  HTTPCommands.MakeRequest ;\r\n        const body:MakeRequestForm = {Amount, Message, AuthenticationString: (this.AuthenticationString)}\r\n        const ResultReturnRequest:TransferRequest = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnRequest;\r\n    }/**use to mark a request s deleted*/\r\n    async DeleteRequest(EmployeeID:string, RequestID:string):Promise<ResultReturnCheck> {\r\n        const Command:HTTPCommands=  HTTPCommands.DeleteRequest;\r\n        const authenticationString = this.AuthenticationString\r\n        const ResultReturn:ResultReturnCheck = (await this.CreateHTTPRequest(Command, {}, `${this.UserID}/${authenticationString}/${RequestID}`)).data;\r\n        return ResultReturn;\r\n    }\r\n    async GetAllSentRequestOfType(IDstring:string, Type:RequestStatus):Promise<TransferRequestArray> {\r\n        const Command:HTTPCommands=  HTTPCommands.GetAllSentRequest ;\r\n        const body ={}\r\n        let ResultReturnRequest:TransferRequestArray;\r\n        switch(Type){\r\n            case 0:{return (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${0}`)).data;}\r\n            case 1:{return  (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${1}`)).data;}\r\n            case 2:{return  (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${2}`)).data;}\r\n            default : {return  (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${4}`)).data;}\r\n        }\r\n    }\r\n\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, View } from \"react-native\";\r\nimport { StyleButton } from \"../../BasicComponents/BasicComponent\";\r\nimport { ContextObject, sysContext } from \"../wrappers/wProviderWrapper\";\r\n\r\nexport default function NavigationBar(props){\r\n    const setActiveTab:React.Dispatch<React.SetStateAction<number>> = props.setFunc;\r\n    const [level, setPermissionLevel] = useState(0);\r\n    const  FoundContext:ContextObject =React.useContext(sysContext)\r\n\r\n    async function setPermissions(){\r\n        const CheckResult1 = await FoundContext.HTTPHandler.CheckManagerPermissions()\r\n        if(CheckResult1.ResultCheck){\r\n            const CheckResult2 = await FoundContext.HTTPHandler.CheckAdminPermissions()\r\n            if(CheckResult2.ResultCheck){setPermissionLevel(2)}\r\n            else{setPermissionLevel(1)}\r\n        }\r\n        else{setPermissionLevel(0)}\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setPermissions()\r\n      return () => {};},);\r\n    \r\n\r\n    function ShowManagerOpts(){\r\n        if(level>0){\r\n            return (<>\r\n                    <View > {StyleButton(()=>setActiveTab(3), 'Manage Request')} </View>\r\n                    <View > {StyleButton(()=>setActiveTab(4), 'Statistics')} </View>\r\n                </>)\r\n        }\r\n    }\r\n    function ShowAdminOpt(){\r\n        if(level>1){\r\n            return(<>\r\n            <View > {StyleButton(()=>setActiveTab(5), 'Admin Tools')} </View>\r\n            </>)}\r\n        }\r\n\r\n\r\n    return (\r\n        <View style={[ {   flexDirection: \"row\"  }]}>\r\n            <View > {StyleButton(()=>setActiveTab(0), 'Your Profile')} </View>\r\n            <View > {StyleButton(()=>setActiveTab(1), 'Your Request')} </View>\r\n            <View > {StyleButton(()=>setActiveTab(2), 'Make Request')} </View>\r\n            {ShowManagerOpts()}\r\n            {ShowAdminOpt()} \r\n            \r\n        </View>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { View } from \"react-native\";\r\nimport { StyleButton, StyleInputText, StyleText } from \"../../../BasicComponents/BasicComponent\";\r\nimport { LoginReturn } from \"../../../Project1-GitUtil-Reimbursement/Types/dto\";\r\nimport { sysContext } from \"../../wrappers/wProviderWrapper\"\r\n\r\n\r\nexport default function UserProfile(){\r\n    const FoundContext = React.useContext(sysContext)\r\n    function getProfileValues(){\r\n        return FoundContext.readUserProfile;\r\n    }\r\n\r\n    const [managerName, setManagerName] = useState('Not Assigned a manager')\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    async function GetManagerName(){\r\n        try {\r\n            const Result = await FoundContext.HTTPHandler.GetManagerName('')\r\n            if(Result.ReturnString.length > 1) { setManagerName(Result.ReturnString)  }\r\n        } catch (error) {\r\n            console.log('error trying to get manager name')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setFirstName(getProfileValues().FirstName)\r\n        setLastName(getProfileValues().LastName)\r\n        setPassword(getProfileValues().Password)\r\n        GetManagerName()\r\n        return () => { } }, [])\r\n\r\n        async function TryLogin(){\r\n            let Login:LoginReturn;\r\n            try {\r\n                const TempHelper = FoundContext.HTTPHandler\r\n                await TempHelper.LogOut()\r\n                Login = await TempHelper.Login(FoundContext.readUserProfile.id,FoundContext.readUserProfile.Password)\r\n                console.log('http handler complete')\r\n                if(Login.ReturnProfile.id){\r\n                    FoundContext.setUserProfile({...Login.ReturnProfile}); \r\n                    console.log(FoundContext.readUserProfile)\r\n                    FoundContext.SetHTTPHandler(TempHelper )\r\n                    setFirstName( FoundContext.readUserProfile.FirstName)\r\n                    setLastName( FoundContext.readUserProfile.LastName)\r\n                    setPassword( FoundContext.readUserProfile.Password)\r\n\r\n                }\r\n    \r\n            } catch (error) {\r\n                console.log('login failed',error)\r\n            }\r\n        }\r\n\r\n        async function changeFirstName(){\r\n            try {\r\n                const ResultString = await FoundContext.HTTPHandler.ChangeFirstName(firstName,FoundContext.readUserProfile.id)\r\n                console.log('change return: ',ResultString )\r\n                if(ResultString){ setFirstName(ResultString.ReturnString)}\r\n            } catch (error) {\r\n                console.log('First name change error',error)\r\n            }\r\n        }\r\n        async function changeLastName(){\r\n            try {\r\n                const ResultString = await FoundContext.HTTPHandler.ChangeLastName(lastName,FoundContext.readUserProfile.id)\r\n                console.log('change return: ',ResultString )\r\n                if(ResultString){ setLastName(ResultString.ReturnString)}\r\n            } catch (error) {\r\n                console.log('Last name change error',error)\r\n            }\r\n        }\r\n        async function changePassword(){\r\n            try {\r\n                const ResultString = await FoundContext.HTTPHandler.ChangePassword(password,FoundContext.readUserProfile.id)\r\n                console.log('change return: ',ResultString )\r\n                if(ResultString){ setPassword(ResultString.ReturnString)}\r\n            } catch (error) {\r\n                console.log('Password name change error',error)\r\n            }\r\n        }\r\n\r\n\r\n\r\n    return (<>\r\n        <View>  \r\n            <View>  {StyleButton(()=>{TryLogin()}, 'Refresh')  }  </View>\r\n            <View >{StyleText( `Username: ${FoundContext .readUserProfile.id} `) }   </View>\r\n            <View >{StyleInputText(setFirstName , \"First Name\",firstName, true, ()=>{changeFirstName()})}   </View>\r\n            <View >{StyleInputText(setLastName , \"Last Name\",lastName , true,()=>{changeLastName()})}   </View>\r\n            <View >{StyleInputText(setPassword , \"Password\",password, true, ()=>{changePassword()})}   </View>\r\n            <View >{StyleText(managerName)}  </View>\r\n        </View>\r\n    </>)\r\n}\r\n\r\n{/* <table>\r\n            <tbody>\r\n            <tr> <td><h4>UserName</h4></td>         <td>    <input defaultValue={ getProfileValues().id} type=\"text\" size={30}/></td> </tr>\r\n            <tr> <td><h4>First Name</h4> </td>      <td>    <input defaultValue={ getProfileValues().FirstName} type=\"text\" size={30}/></td> </tr>\r\n            <tr> <td><h4>Last Name</h4></td>        <td>    <input defaultValue={ getProfileValues().LastName} type=\"text\" size={30}/></td> </tr>\r\n            <tr> <td><h4>Password</h4> </td>        <td>    <input defaultValue={ getProfileValues().Password} type=\"text\" size={30}/></td> </tr>\r\n            <tr> <td><h4>Manager</h4> </td>         <td>    <h4> {managerName } </h4> </td> </tr>\r\n            </tbody>\r\n        </table> */}","import { Request } from \"../../Project1-GitUtil-Reimbursement/Types/Entity\";\r\nimport { RequestStatus } from \"../../Project1-GitUtil-Reimbursement/Types/Enums\";\r\nimport {v4} from 'uuid';\r\nimport React, { useState } from \"react\";\r\nimport { Alert, Modal, StyleProp, View, ViewStyle } from \"react-native\";\r\nimport { StyleButton, StyleInputText, StyleText } from \"../../BasicComponents/BasicComponent\";\r\nimport { buttonType, textType } from \"../../BasicComponents/StyleSheet\";\r\nimport { sysContext } from \"../wrappers/wProviderWrapper\";\r\n\r\n\r\nexport default function RequestSelectButton(props){\r\n    const FoundContext = React.useContext(sysContext)\r\n\r\n    // Initialization vars=============================\r\n    const NullRequest:Request = {Amount: 0, RequestStatus:0,PostDate: 0}\r\n    const Type: RequestStatus = RequestStatus.All\r\n    //=================================================\r\n    const InputRequest:Request = props.InputRequest\r\n    const setSetRequest:Function = props.setSetRequest\r\n    const DisplayRequestButtons:Function = props.DisplayRequestButtons\r\n    const ManagerMode:boolean = props.ManagerMode;\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [sendMessage, setSendMessage] = useState('');\r\n\r\n    function ConvertPostedDate():string{\r\n        const Display = (new Date(InputRequest?.PostDate)).toLocaleDateString()\r\n        return Display;\r\n    }\r\n    function ConvertModDate():string{\r\n        const Display = (new Date(InputRequest?.ModifiedDate)).toLocaleDateString()\r\n        return Display;\r\n    }\r\n    function grabStatus(){\r\n        return RequestStatus[InputRequest?.RequestStatus] ?? 'null';\r\n    }\r\n\r\n    async function AcceptRequest(){\r\n        const Result = await FoundContext.HTTPHandler.ManagerChangeRequest(FoundContext.readUserProfile.id, InputRequest.id,RequestStatus.Approved,sendMessage)\r\n        if(Result?.ReturnRequest){\r\n            setSetRequest({...Result.ReturnRequest})\r\n            DisplayRequestButtons()\r\n            setSendMessage('')\r\n            setModalVisible(false)\r\n\r\n        }\r\n    }\r\n    async function DenyRequest(){\r\n        const Result = await FoundContext.HTTPHandler.ManagerChangeRequest(FoundContext.readUserProfile.id, InputRequest.id,RequestStatus.Denied,sendMessage)\r\n        if(Result?.ReturnRequest){\r\n            setSetRequest({...Result.ReturnRequest})\r\n            DisplayRequestButtons()\r\n            setSendMessage('')\r\n            setModalVisible(false)\r\n        }\r\n    }\r\n    async function DeleteRequest(){\r\n        const Result = await FoundContext.HTTPHandler.DeleteRequest(FoundContext.readUserProfile.id, InputRequest.id)\r\n        if(Result.ResultCheck){\r\n            DisplayRequestButtons()\r\n            setSendMessage('')\r\n            setModalVisible(false)\r\n        }\r\n    }\r\n\r\n    function displayButtonOptions(){\r\n        if(ManagerMode){\r\n            if(InputRequest?.RequestStatus == RequestStatus.Pending){ return ( \r\n                <View style={{flexDirection: 'column'}}>\r\n                    <View> {StyleInputText(setSendMessage,'Message: ',sendMessage )}  </View>\r\n                    <View style={{flexDirection: 'row'}} > \r\n                        <View> {StyleButton(()=>DenyRequest(), 'Deny')} </View>\r\n                        <View> {StyleButton(()=>AcceptRequest(), 'Approve')} </View>\r\n                    <View> </View>\r\n                </View>\r\n\r\n                </View>\r\n                )}\r\n            return (<></>)\r\n        }\r\n        else{\r\n            if(InputRequest?.RequestStatus == RequestStatus.Pending){return (\r\n                <View>\r\n                    <View> {StyleButton(()=>DeleteRequest(), 'Delete')} </View>\r\n                </View>\r\n            )}\r\n            return (<></>)\r\n        }\r\n    }\r\n\r\n    return ( <>\r\n    <View> \r\n            <Modal animationType=\"slide\" transparent={true}  visible={modalVisible}  onRequestClose={() => {\r\n                    Alert.alert(\"Modal has been closed.\");\r\n                    setModalVisible(!modalVisible);\r\n                }}>\r\n                    <View style={styles}>\r\n                        <View> {StyleText('Reimbursement', textType.HeaderSection)}  </View>\r\n                        <View style={{flexDirection: 'column', justifyContent: 'center', alignItems: 'center',}}>\r\n                            <View> {StyleText('Post Date') } </View> <View> {StyleText(ConvertPostedDate()) } </View>\r\n                            <View> {StyleText('Modified date') } </View> <View> {StyleText(ConvertModDate()) } </View>\r\n                        </View>\r\n                        <View style={{flexDirection: 'row',justifyContent: 'center', alignItems: 'center', backgroundColor:'#2233aa'}}>\r\n                            <View style ={{padding:5}} > {StyleText('Amount: ') } </View> <View style ={{padding:5}} > {StyleText('500') } </View>\r\n                            <View style ={{padding:5}} > {StyleText('Status: ') } </View> <View style ={{padding:5}} > {StyleText(grabStatus()) } </View>\r\n                        </View>\r\n                        <View style={{flexDirection: 'row'}}>  {StyleText('Request Reason: ')}  {StyleText(InputRequest.InputMessage)} </View>\r\n                        <View style={{flexDirection: 'row'}}>  {StyleText('Manager Response: ')}  {StyleText(InputRequest.ManagerMessage)} </View>\r\n                        <View >{  displayButtonOptions()  }</View>\r\n                        <View style={{padding:10}} >{StyleButton(()=> setModalVisible(false), ' X ', buttonType.exist )}</View>\r\n                    </View>\r\n            </Modal>   \r\n    </View>\r\n        <View>\r\n            {StyleButton(()=> setModalVisible(true),`${ConvertPostedDate()}: $${ InputRequest.Amount}, ${grabStatus()}` )}\r\n        </View>\r\n    \r\n    </>)\r\n}\r\n\r\nconst styles:StyleProp<ViewStyle> ={\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#334433',\r\n};\r\n","import React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { Request } from \"../../../Project1-GitUtil-Reimbursement/Types/Entity\"\r\nimport { RequestStatus } from \"../../../Project1-GitUtil-Reimbursement/Types/Enums\"\r\nimport RequestSelectButton from \"../../element/eRequestSelectButton\"\r\nimport { sysContext } from \"../../wrappers/wProviderWrapper\"\r\nimport {v4} from 'uuid';\r\nimport { StyleButton, StyleText } from \"../../../BasicComponents/BasicComponent\"\r\nimport { textType } from \"../../../BasicComponents/StyleSheet\"\r\nimport { FlatList, ScrollView, StatusBar, View } from \"react-native\"\r\nimport { TransferRequestArray } from \"../../../Project1-GitUtil-Reimbursement/Types/dto\"\r\n\r\n\r\nexport default function RequestView(props){\r\n    const ManagerMode:boolean = props.ManagerMode\r\n    const FoundContext = React.useContext(sysContext)\r\n\r\n    // Initialization vars=============================\r\n    const NullRequest:Request = {Amount: 0, RequestStatus:0,PostDate: 0}\r\n    const Type: RequestStatus = RequestStatus.All\r\n    //=================================================\r\n    const [RequestID, setSetRequest] = useState(NullRequest)\r\n    const [RequestType, setRequestType] = useState(Type)\r\n    const [ButtonDisplay, setButtonDisplay] = useState([<></>])\r\n\r\n\r\n    useEffect(() => {\r\n        setButtonDisplay([<></>])\r\n        DisplayRequestButtons();\r\n\r\n        return () => {}}, []);\r\n\r\n\r\n    async function DisplayRequestButtons(){\r\n        if(ManagerMode){\r\n            let transferArray:TransferRequestArray;\r\n            try {\r\n                transferArray = await FoundContext.HTTPHandler.ManagerGetAllRequest(FoundContext.readUserProfile.id)\r\n            } catch (error) {\r\n                setButtonDisplay([ StyleText('No Request Found') ] );return;\r\n            }\r\n            transferArray = await FoundContext.HTTPHandler.GetAllSentRequestOfType(FoundContext.readUserProfile.id,RequestType )\r\n            if(! (transferArray.ReturnRequestArray.length >0) ) { \r\n                setButtonDisplay([ StyleText('No Request Found') ] );return;\r\n            } \r\n            setButtonDisplay(   transferArray.ReturnRequestArray.map( (e)=> <RequestSelectButton key = {v4()} InputRequest ={e} setSetRequest={setSetRequest} ManagerMode={ManagerMode}/>) )\r\n            \r\n        }\r\n        else{\r\n            let transferArray:TransferRequestArray;\r\n            try {\r\n                transferArray = await FoundContext.HTTPHandler.ManagerGetAllRequest(FoundContext.readUserProfile.id)\r\n            } catch (error) {\r\n                setButtonDisplay([StyleText('No Request Found')] );return;\r\n            }\r\n            if(! (transferArray.ReturnRequestArray.length >0) ) { \r\n                setButtonDisplay([StyleText('No Request Found')] )\r\n                return;\r\n            } \r\n            setButtonDisplay(   transferArray.ReturnRequestArray.map( (e)=> <RequestSelectButton key = {v4()} InputRequest ={e} setSetRequest={setSetRequest} DisplayRequestButtons={DisplayRequestButtons}/>) )\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    return( <>\r\n        <View style = {{padding:20}}> {StyleButton( ()=> {setButtonDisplay([<></>]); DisplayRequestButtons();} , 'Refresh') } </View>\r\n        <View style={[ {   flexDirection: \"column\"  }]} >\r\n            <ScrollView style={styles.scrollView}>\r\n                {ButtonDisplay} \r\n            </ScrollView>\r\n        </View>\r\n        \r\n    </>)\r\n}\r\n\r\n\r\nconst styles = ({\r\n    container: {\r\n      flex: 1,\r\n      paddingTop: StatusBar.currentHeight,\r\n    },\r\n    scrollView: {\r\n      backgroundColor: '#222222',\r\n      marginHorizontal: 20,\r\n    },\r\n    text: {\r\n      fontSize: 42,\r\n    },\r\n  });","import React, { useState } from \"react\"\r\nimport { View } from \"react-native\"\r\nimport { StyleButton, StyleInputText, StyleText } from \"../../../BasicComponents/BasicComponent\"\r\nimport { buttonType, InputTextType, TextStyle, textType } from \"../../../BasicComponents/StyleSheet\"\r\nimport { TransferRequest } from \"../../../Project1-GitUtil-Reimbursement/Types/dto\"\r\nimport { sysContext } from \"../../wrappers/wProviderWrapper\"\r\n\r\n\r\nexport default function RequestCreation(){\r\n    const FoundContext = React.useContext(sysContext)\r\n    const [RequestAmount, setStateAmount] = useState(0)\r\n    const [RequestMessage, setRequestMessage] = useState('General Request')\r\n    const [ShowUpdateScreen, setShowUpdateScreen] = useState(false)\r\n    const [SendEnabled, setSendEnabled] = useState(false)\r\n    function ConvertAmountToText(ss:string){\r\n        setStateAmount(Number(ss))\r\n        setSendEnabled(true)\r\n        setTimeout(()=>{\r\n            if(RequestAmount < 0){ console.log(RequestAmount);setStateAmount(0); setSendEnabled(false) }\r\n            if(RequestAmount === NaN) {console.log(RequestAmount);setStateAmount(0); setSendEnabled(false)} \r\n            if(String(RequestAmount) === 'NaN') {console.log(RequestAmount);setStateAmount(0); setSendEnabled(false)} \r\n        },500)\r\n    }\r\n    async function SendRequest(){\r\n        const T:TransferRequest =  await FoundContext.HTTPHandler.MakeRequest('', RequestAmount,RequestMessage)\r\n        if(T){\r\n            setShowUpdateScreen(true); \r\n            setStateAmount(0);\r\n            setRequestMessage('');\r\n            return }\r\n        console.log('Request failed');\r\n    }\r\n\r\n    function RequestSubmitView(){\r\n        return (<>\r\n            <View>\r\n                <View style={{padding:50}}> {StyleText('Thank you for making a request',textType.HeaderSection)} </View>\r\n                <View> {StyleButton( ()=> setShowUpdateScreen(false), 'create new request')} </View>\r\n            </View>\r\n        </>)\r\n    }\r\n    function RequestCreateView(){\r\n        return(<>\r\n            <View>\r\n                <View style={{padding:50}}>{StyleText(\"Create Your Request\",textType.HeaderSection)} </View>\r\n                <View >{StyleInputText(ConvertAmountToText  , \"Amount\", (()=> { let temp = RequestAmount; return String(temp)}) () )}   </View>\r\n                <View >{StyleInputText( setRequestMessage , \"Description\",RequestMessage)} </View>\r\n                <View >{StyleButton(()=>{ SendRequest()},'Send Request',buttonType.normal,SendEnabled ) }  </View>\r\n            </View>\r\n        </>)\r\n    }\r\n    function SwitchDisplayView(){\r\n        if(ShowUpdateScreen) {return RequestSubmitView()}\r\n        else {return RequestCreateView()}\r\n    }\r\n\r\n    return (<>\r\n        {SwitchDisplayView()}\r\n    </>)\r\n}\r\n\r\n{/* <h1>Make a Request</h1>\r\n        <table>\r\n            <tbody>\r\n            <tr> <td><h4>Request Amount</h4></td>   <td>    <input defaultValue={ RequestAmount}    onChange={SetAmount} type=\"number\" size={30}/></td> </tr>\r\n            <tr> <td><h4> Added Message </h4> </td>    <td>    <input defaultValue={ RequestMessage}      onChange={SetMessage} type=\"text\" size={30}/></td> </tr>\r\n            </tbody>\r\n        </table>\r\n        <button onClick={ ()=>{SendRequest()} }>  Submit Request </button > */}","import React, { useEffect, useState } from \"react\"\r\nimport { ScrollView, StatusBar, View } from \"react-native\"\r\nimport { StyleText } from \"../../../BasicComponents/BasicComponent\"\r\nimport { TransferRecords } from \"../../../Project1-GitUtil-Reimbursement/Types/dto\"\r\nimport { sysContext } from \"../../wrappers/wProviderWrapper\"\r\n\r\n\r\nexport default function DisplayRecords(){\r\n    const FoundContext = React.useContext(sysContext)\r\n    const [EntryDisplay, setEntry] = useState([<></>])\r\n\r\n    async function DisplayRecords(){\r\n        const Result:TransferRecords = await FoundContext.HTTPHandler.ManagerGetRecords()\r\n        setEntry( Result.ReturnRecords.map((   (e)=><View> {StyleText(e)}  </View> ) )   )\r\n    }\r\n\r\n    useEffect(() => {\r\n        DisplayRecords()\r\n        return () => {};}, []);\r\n    \r\n\r\n    return(\r\n    <View>\r\n        <ScrollView style={styles.scrollView}>\r\n          {EntryDisplay} \r\n        </ScrollView>\r\n    </View>)\r\n}\r\n\r\n\r\n\r\nconst styles = ({\r\n    container: {\r\n      flex: 1,\r\n      paddingTop: StatusBar.currentHeight,\r\n    },\r\n    scrollView: {\r\n      backgroundColor: '#222222',\r\n      marginHorizontal: 20,\r\n    },\r\n    text: {\r\n      fontSize: 42,\r\n    },\r\n  });","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { StyleButton } from \"../../BasicComponents/BasicComponent\";\r\nimport { buttonType } from \"../../BasicComponents/StyleSheet\";\r\n\r\n\r\nexport default function AdminNavBar(props){\r\n    const setAdminIndex:React.Dispatch<React.SetStateAction<number>> = props.setAdminIndex\r\n\r\n    return(\r\n    <View style={[ {   flexDirection: \"row\"  }]}>\r\n        <View> {StyleButton(()=>{setAdminIndex(0)}, 'View All Profiles',buttonType.adminStyle )} </View>\r\n        <View> {StyleButton(()=>{setAdminIndex(1)}, 'View All Request',buttonType.adminStyle)} </View>\r\n        <View> {StyleButton(()=>{setAdminIndex(2)}, 'Create Profile',buttonType.adminStyle)} </View>\r\n        <View> {StyleButton(()=>{setAdminIndex(4)}, 'Delete Profile',buttonType.adminStyle)} </View>\r\n        <View> {StyleButton(()=>{setAdminIndex(3)}, 'Assign Manager',buttonType.adminStyle)} </View>\r\n        <View> {StyleButton(()=>{setAdminIndex(4)}, 'Un-Assign Manager',buttonType.adminStyle)} </View>\r\n    </View>)\r\n}","import React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport AdminNavBar from \"./AdminNavBar\";\r\n\r\n\r\nexport default function AdminPage(){\r\n    const [adminIndex, setAdminIndex] = useState(0);\r\n\r\n    return(\r\n    <View>\r\n        <View> <AdminNavBar setAdminIndex={setAdminIndex}/>  </View>\r\n    </View>)\r\n}","import { useState } from \"react\";\r\nimport NavigationBar from \"../element/eNavigationBar\";\r\nimport UserProfile from \"../panels/homepage/pUserProfile\";\r\nimport RequestView from \"../panels/homepage/pRequestView\";\r\nimport RequestCreation from \"../panels/homepage/pRequestCreation\";\r\nimport DisplayRecords from \"../panels/homepage/pDisplayRecords\";\r\nimport { View,Text } from \"react-native\";\r\nimport { StyleText } from \"../../BasicComponents/BasicComponent\";\r\nimport { textType } from \"../../BasicComponents/StyleSheet\";\r\nimport AdminPage from \"../adminTools/AdminPage\";\r\n\r\n\r\nexport default function HomePage(){\r\n    const [pageTitle, setPageTitle] = useState('Your Profile');\r\n    const [ActiveTab, setActiveTab] = useState(0)\r\n    function change(index:number){\r\n        setActiveTab(index)\r\n        switch(index){\r\n            case 0:     { setPageTitle('Your Profile')      ;break}\r\n            case 1:     { setPageTitle('Your Request')      ;break}\r\n            case 2:     { setPageTitle('Make a request')    ;break}\r\n            case 3:     { setPageTitle('Manage Request')    ;break}\r\n            case 4:     { setPageTitle('Statistics')        ;break}\r\n            case 5:     { setPageTitle('Admin Tools')        ;break}\r\n            default:    { setPageTitle('Your Profile')      ;break}\r\n        }\r\n    }\r\n    function switchActiveTable(){\r\n        switch(ActiveTab){\r\n            case 0:     { return ( <UserProfile/>  ) }//console.log('profile page');   }\r\n            case 1:     { return <RequestView ManagerMode = {false}/>}\r\n            case 2:     { return  <RequestCreation/>}// ;return ( <RequestCreation/>  )  }\r\n            case 3:     { return <RequestView ManagerMode = {true}/> }\r\n            case 4:     { return ( <DisplayRecords/> ) }\r\n            case 5:     { return ( <AdminPage/>) }\r\n            default:    { return ( <UserProfile/>  )  }\r\n        }\r\n    }\r\n    return(<>\r\n    <View style={{padding:50}}> {StyleText(pageTitle,textType.PageTitle)} </View>\r\n    <View style={[ {   flexDirection: \"column\"  }]}>\r\n        <NavigationBar setFunc={ change }/>\r\n        {switchActiveTable()}\r\n    </View>\r\n    </>)\r\n}\r\n//<NavigationBar switchTab={ ()=>{}/*setActiveTab*/}/>","import { View, Text } from \"react-native\"\r\n\r\n\r\n\r\nexport default function NoConnectionScreen(){\r\n    return(\r\n        <View style={{ alignItems: 'center', justifyContent: 'center', }}>\r\n            <Text style={{ fontSize:100, color:\"floralwhite\" }} >Sorry, Cannot Connect...</Text>\r\n            <Text style={{ fontSize:40, color:\"floralwhite\" }}>The Server might be down, try again later</Text>\r\n        </View>)\r\n}","import React, { useState } from \"react\"\r\nimport { View, Text, Button, TextInput } from \"react-native\";\r\nimport { HTTPCreateProfile } from \"../../../Project1-GitUtil-Reimbursement/Types/Entity\";\r\nimport { textType } from \"../../../BasicComponents/StyleSheet\";\r\nimport { ContextObject, sysContext, SysReducerAction } from \"../../wrappers/wProviderWrapper\"\r\nimport {StyleInputText, StyleButton, StyleText } from \"../../../BasicComponents/BasicComponent\";\r\n\r\n\r\nexport default function CreateProfileScreen(props){\r\n    const dispatchCreateScreen = props.dispatch\r\n    // Basic setup to get all context and dispatcher short hand %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n    let FoundContext:ContextObject;\r\n    FoundContext = React.useContext(sysContext)\r\n    /**this function is used get to grab the HTTP handler as a short hand*/\r\n    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n    const [userPassword, setStatePassword] = useState('password')\r\n    const [userName, setStateUserName] = useState('username')\r\n    const [userFirstName, setStateFirstName] = useState('first name')\r\n    const [userLastName, setStateLastName] = useState('last name')\r\n\r\n    async function TryCreateProfile(){\r\n        const InitProfile:HTTPCreateProfile = { FirstName: userFirstName,LastName: userLastName,Password: userPassword,id: userName};\r\n        const TempHelper = FoundContext.HTTPHandler\r\n        const UserProfile = await TempHelper.CreateProfile(InitProfile)\r\n        if(UserProfile.ReturnProfile){ \r\n            FoundContext.SetHTTPHandler(TempHelper);\r\n            FoundContext.setUserProfile(UserProfile.ReturnProfile) }\r\n    }\r\n    \r\n    return (<>\r\n        {StyleText(\"Create A Profile\", textType.PageTitle)}\r\n    <View style={[ {   flexDirection: \"column\"  }]}>\r\n        <View >{StyleInputText(setStateFirstName, \"First Name\",userFirstName)}   </View>\r\n        <View >{StyleInputText(setStateLastName, \"Last Name\", userLastName)}  </View>\r\n        <View >{StyleInputText(setStateUserName, \"Username\", userName)}  </View>\r\n        <View >{StyleInputText(setStatePassword, \"Password\", userPassword)} </View>\r\n        <View style={[{   flexDirection: \"row\"  }]}> \r\n            <View style ={[{flex:1}]}> {StyleButton(()=>dispatchCreateScreen(), \"Back to Login\")} </View>\r\n            <View style ={[{flex:1}]}> {StyleButton(()=>TryCreateProfile(), \"Submit\")}</View>\r\n        </View>\r\n    </View>\r\n    </>)\r\n}\r\n\r\n","import React, { useState } from \"react\"\r\nimport { View } from \"react-native\"\r\nimport { StyleButton, StyleInputText, StyleText } from \"../../../BasicComponents/BasicComponent\"\r\nimport { textType } from \"../../../BasicComponents/StyleSheet\"\r\nimport HTTPRequestHandler from \"../../../Project1-GitUtil-Reimbursement/Classes/HTTPRequestHandler\"\r\nimport { LoginReturn } from \"../../../Project1-GitUtil-Reimbursement/Types/dto\"\r\nimport { ContextObject, sysContext, SysReducerAction } from \"../../wrappers/wProviderWrapper\"\r\n\r\n\r\nexport default function LoginScreen(props){\r\n    // Basic setup to get all context and dispatcher short hand %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n    const FoundContext = React.useContext(sysContext)\r\n    /**this function is used get to grab the HTTP handler as a short hand*/\r\n\r\n    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n    const dispatchCreateScreen = props.dispatch\r\n    const [userPassword, setStatePassword] = useState('')\r\n    const [userName, setStateUserName] = useState('')\r\n\r\n    async function TryLogin(){\r\n        let Login:LoginReturn;\r\n        try {\r\n            const TempHelper = FoundContext.HTTPHandler\r\n            console.log('http handler being called')\r\n            Login = await TempHelper.Login(userName,userPassword)\r\n            console.log('http handler complete')\r\n            if(Login.ReturnProfile.id){\r\n                FoundContext.setUserProfile({...Login.ReturnProfile}); \r\n                FoundContext.SetHTTPHandler(TempHelper )\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log('login failed',error)\r\n        }\r\n    }\r\n\r\n    return(<>\r\n        {StyleText(\"Welcome to Reimburse (TM)\", textType.PageTitle)} \r\n        <View style={[ {   flexDirection: \"column\"  }]}>\r\n        <View >{StyleInputText(setStateUserName , \"Username\",userName)}   </View>\r\n        <View >{StyleInputText(setStatePassword, \"Password\",userPassword)}   </View>\r\n            <View style={[{   flexDirection: \"row\"  }]}> \r\n                <View style ={[{flex:1}]}> {StyleButton(()=>dispatchCreateScreen(), \"Create Profile\")} </View>\r\n                <View style ={[{flex:1}]}> {StyleButton(()=>TryLogin(), \"Login\")}</View>\r\n            </View>\r\n        </View>\r\n    </>)\r\n}","import { useReducer } from \"react\"\r\nimport CreateProfileScreen from \"../panels/signin/pCreateProfileScreen\"\r\nimport LoginScreen from \"../panels/signin/pLoginScreen\"\r\n\r\nfunction reducer(State:boolean,action:any){ return !(State); }\r\nconst initState:boolean = false;\r\n\r\nexport default function SignInSwitcher(){\r\n    const [isCreateScreen, dispatchCreateScreen] = useReducer(reducer, initState)\r\n    function SignInView(){\r\n        if(isCreateScreen){return <CreateProfileScreen dispatch={dispatchCreateScreen}/>}\r\n        else {return <LoginScreen dispatch={dispatchCreateScreen}/>}\r\n    }\r\n    return (<>\r\n        {SignInView()}\r\n        </>)\r\n}","import React, { useState } from \"react\"\r\nimport HomePage from \"../page/HomePage\"\r\nimport NoConnectionScreen from \"../page/NoConnectionScreen\"\r\nimport { ContextObject,SysReducerAction, sysContext } from \"./wProviderWrapper\"\r\nimport SignInSwitcher from \"./wSigninSwitcher\"\r\n\r\n\r\n\r\nexport default function ConnectionSwitcher(){\r\n    // Basic setup to get all context and dispatcher short hand %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n    const  FoundContext:ContextObject =React.useContext(sysContext)\r\n    /**this function is used get to grab the HTTP handler as a short hand*/\r\n    const [isConnected, setConnected] = useState(false)\r\n    async function checkConnection(){ \r\n        try {\r\n            const value = await FoundContext.HTTPHandler.CheckConnection();\r\n            setConnected(value)\r\n        } catch (error) {\r\n            setConnected(false)\r\n        }\r\n    }\r\n\r\n    function switchPage(){\r\n        checkConnection()\r\n        if(!isConnected){return <NoConnectionScreen/>}\r\n        if(!FoundContext.readUserProfile?.id){return <SignInSwitcher/>}\r\n        return <HomePage/>\r\n    }\r\n    return(<>{switchPage()} </>)\r\n}","import { StatusBar } from 'expo-status-bar';\r\nimport React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport ConnectionSwitcher from './components/wrappers/wConnectionSwitcher';\r\nimport SuperProvider from './components/wrappers/wProviderWrapper';\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <SuperProvider>\r\n        < ConnectionSwitcher/>\r\n      </SuperProvider>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#045',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"sourceRoot":""}