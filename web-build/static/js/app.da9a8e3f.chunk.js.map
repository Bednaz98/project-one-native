{"version":3,"sources":["components/page/NoConnectionScreen.tsx","Project1-GitUtil-Reimbursement/Types/Enums.ts","components/wrappers/wProviderWrapper.tsx","Project1-GitUtil-Reimbursement/Classes/HTTPRequestHandler.ts","App.tsx"],"names":["NoConnectionScreen","View","style","alignItems","justifyContent","Text","fontSize","color","RequestStatus","HTTPCommands","HTTPRequestErrorFlag","SysReducerAction","HTTPRequestHandler","InputURL","InputPortNumber","AuthenticationString","UserID","this","PortNumber","length","TargetURL","Authentication","Error","Command","ID","CreateProfile","Login","LogOut","ChangeFirstName","ChangeLastName","ChangePassword","GetManageName","MakeRequest","DeleteRequest","GetAllSentRequest","ManageChangeRequest","ManagerGetAllRequest","AdminGetAllEmployees","AdminAssignManager","AdminRemoveEmployee","AdminDeleteProfile","GetRecords","GetRoute","body","Axios","post","CreateURL","patch","get","delete","a","async","status","password","CreateHTTPRequest","JsonBody","data","LoginResult","ReturnProfile","id","EmployeeID","ManagerID","AdminID","ProfileInit","RequestID","Type","Message","Denied","Approved","ReturnString","Pending","ResultReturnRequest","ReturnRecord","LoginFound","console","log","JSON","stringify","NewFirstName","ResultReturnString","NewLastName","NewPassword","Amount","authenticationString","ResultReturn","IDstring","contextValue","HTTPHandler","readUserProfile","FirstName","LastName","setUserProfile","SetHTTPHandler","sysContext","React","createContext","SuperProvider","children","useState","readState","Provider","value","App","styles","container","StatusBar","StyleSheet","create","flex","backgroundColor"],"mappings":"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","file":"static/js/app.da9a8e3f.chunk.js","sourcesContent":["import { View, Text } from \"react-native\"\r\n\r\n\r\n\r\nexport default function NoConnectionScreen(){\r\n    return(\r\n        <View style={{ alignItems: 'center', justifyContent: 'center', }}>\r\n            <Text style={{ fontSize:100, color:\"floralwhite\" }} >Sorry, Can not connect...</Text>\r\n            <Text style={{ fontSize:40, color:\"floralwhite\" }}>The Server might be down, try again later</Text>\r\n        </View>)\r\n}","\r\n// used for determining the status of a Reimbursement request\r\nexport enum RequestStatus{\r\n    Pending,\r\n    Denied,\r\n    Approved,\r\n    deleted,\r\n    All\r\n}\r\n\r\nexport enum HTTPCommands{\r\n    CreateProfile,\r\n    Login,\r\n    LogOut,\r\n    ChangeFirstName,\r\n    ChangeLastName,\r\n    ChangePassword,\r\n    GetManageName,\r\n    MakeRequest,\r\n    DeleteRequest,\r\n    GetAllSentRequest,\r\n    ManageChangeRequest,\r\n    ManagerGetAllRequest,\r\n    AdminGetAllEmployees,\r\n    AdminAssignManager,\r\n    AdminRemoveEmployee,\r\n    AdminDeleteProfile,\r\n    GetRecords\r\n}\r\n\r\n// used for indicating switch codes for communicating over http\r\nexport enum HTTPRequestErrorFlag{\r\n    /**0 used tp verify first and last name length*/\r\n    NameToShort,\r\n    /**1 used to verify first and last name illegal character usage*/\r\n    NameCharError,\r\n    /**2 used to verify password criteria*/\r\n    PasswordInitError,\r\n    /**3  used if the manager does not exist when first creating a profile*/\r\n    InitManagerNotExist,\r\n    /**4   used if any employee listed is not found on the server when trying create a profile*/\r\n    InitEmployeeError,\r\n    /**5 used to indicate that the server failed to create a profile*/\r\n    ProfileServerCreationError, \r\n    /**6 Used to indicate that the first and last name used to generate an initial id already exist*/\r\n    ProfileAlreadyExist,\r\n    /**7 used to indicate that the manager ID request could not be found when searching for a name*/\r\n    ManagerNameNotFound,\r\n    /**8 used to indicate that the employee ID sent does not correspond to a manager, the ID may still be a valid employee*/\r\n    NotAManager,\r\n    /**9 Used as a general notification that the given employee ID does not exist does not exist on in the database*/\r\n    EmployeeNotFoundGeneral,\r\n    /**10 used when the server fails to create a request*/\r\n    RequestCreationError,\r\n    /**11 Used when the Server is having problems updating a profile*/\r\n    ProfileUpdateError,\r\n    /**12 Used to indicate that the server could not find the request*/\r\n    RequestNotFound,\r\n    /**13 Used to indicate that the server could not update the request*/\r\n    RequestUpdateError,\r\n    /**14 Used to indicate that the employee does not have access to the request*/\r\n    EmployeeRequestAccessError,\r\n    /**15 Used to indicate that the server failed to delete a request*/\r\n    RequestDeletionError,\r\n    /**16 Used to indicate that a filter request type was denied*/\r\n    RequestFilterDenied,\r\n    /**17 used to identity that a request was previously approved and denied and can no longer be marked for as deleted*/\r\n    RequestChangeStatusError,\r\n    /**18 used to indicated that a manager can't mark employees request as deleted*/\r\n    RequestManagerDeleteError,\r\n    /**18 used to indicated that a manager can't mark employees request as all*/\r\n    RequestManagerInvalidType,\r\n    /**19 used when a manager does not have privileges to edit a request*/\r\n    ManagerNotValidPrivileges,\r\n    /**20 used to indicate that the employee to assign is not found*/\r\n    EmployeeAssignmentError,\r\n    /**21 used to indicate that the manager to assign is not found*/\r\n    ManagerAssignmentError,\r\n    /**22 used to indicate that the un-assignment process failed on the server*/\r\n    UnAssignError,\r\n    /**23 used to indicate that the user was not registered for authentication*/\r\n    AuthenticationNotFound,\r\n    /**24 used to indicate that the input authentication string does not match the server string*/\r\n    AuthenticationStringError,\r\n    /**25 used as a default value for the system. THIS SHOULD NOT BE USED*/\r\n    Unknown,\r\n    \r\n\r\n\r\n}","import React, { useReducer, useState } from \"react\";\r\nimport HTTPRequestHandler from \"../../Project1-GitUtil-Reimbursement/Classes/HTTPRequestHandler\";\r\nimport {Profile, Request} from '../../Project1-GitUtil-Reimbursement/Types/Entity';\r\n\r\n/** Action for reducer function*/ \r\nexport enum SysReducerAction{\r\n    SetProfile\r\n}\r\n\r\n\r\n\r\n/**Object to content the state, dispatcher and initialized state*/\r\nexport interface ContextObject{\r\n    HTTPHandler:HTTPRequestHandler\r\n    readUserProfile:Profile \r\n    setUserProfile:React.Dispatch<React.SetStateAction<Profile>> \r\n    SetHTTPHandler:React.Dispatch<React.SetStateAction<HTTPRequestHandler>> \r\n}\r\n\r\n\r\n/**used to for default context values; assignment of null just for intellisense*/\r\nconst contextValue: ContextObject = {\r\n    HTTPHandler: new HTTPRequestHandler('',3001),\r\n    readUserProfile: {FirstName: \"\",LastName: \"\"},\r\n    setUserProfile: ()=>{},\r\n    SetHTTPHandler: ()=>{},\r\n}\r\nexport const sysContext = React.createContext(contextValue)\r\n\r\n\r\n\r\nexport default function SuperProvider( {children} ){\r\n    const temp:Profile = {FirstName: \"\",LastName: \"\"}\r\n    const [readUserProfile, setUserProfile] = useState(temp)\r\n    const [HTTPHandler, setHTTPHandler] = useState(new HTTPRequestHandler('',3001))\r\n    /**re-assignment so typescript is happy assign to 'any'*/\r\n    const readState:ContextObject = {\r\n        HTTPHandler: HTTPHandler,\r\n        readUserProfile,\r\n        setUserProfile: setUserProfile,\r\n        SetHTTPHandler: setHTTPHandler\r\n    };\r\n\r\n\r\n    return(<>\r\n        <sysContext.Provider value = { {...readState} }>\r\n            {children}\r\n        </sysContext.Provider>\r\n    \r\n    </>)\r\n\r\n\r\n}","import { HTTPCommands, RequestStatus } from \"../Types/Enums\";\r\nimport  Axios, { AxiosResponse }  from \"axios\";\r\nimport { AdminHTTPCLInterface, LogHTTPCInterface, ManagerHTTPCLInterface, ProfileHTTPCInterface } from \"../Types/HTTPCommands\";\r\nimport { HTTPCreateProfile, Profile, Request } from \"../Types/Entity\";\r\nimport { LoginReturn, MakeRequestForm, ResultReturnCheck, ResultReturnMarkRequest, ResultReturnString, TransferProfile, TransferProfileArray, TransferRecords, TransferRequest, TransferRequestArray } from \"../Types/dto\";\r\nimport {ResultReturnStringID} from '../Types/dto';\r\n\r\n\r\nexport default class  HTTPRequestHandler implements ProfileHTTPCInterface, ManagerHTTPCLInterface, AdminHTTPCLInterface, LogHTTPCInterface{\r\n    // Unused =========================================================\r\n    CheckCreds(UserID: string, Authentication: string): boolean {\r\n        throw new Error(\"Not a useable outside of the server\");\r\n    }// Not Used ======================================================\r\n\r\n    private PortNumber: number;\r\n    private TargetURL: string;\r\n    private AuthenticationString:string ='';\r\n    private UserID:string = '';\r\n    constructor(InputURL:string, InputPortNumber:number=3001){\r\n        this.PortNumber = InputPortNumber ?? 3001 ;\r\n        if(InputURL?.length>1) {this.TargetURL =  InputURL}\r\n        else{this.TargetURL = 'http://localhost'}\r\n    }\r\n    // Internal Commands ===============================================\r\n    private GetRoute(Command:HTTPCommands, ID:string){\r\n        switch(Command){\r\n            case HTTPCommands.CreateProfile:        { return `/Create`;}\r\n            case HTTPCommands.Login:                { return `/Login/${ID}`;}\r\n            case HTTPCommands.LogOut:               { return `/LogOut/${ID}`;}\r\n            case HTTPCommands.ChangeFirstName:      { return `/Profile/${ID}/ChangeFirst`;}\r\n            case HTTPCommands.ChangeLastName:       { return `/Profile/${ID}/ChangeLast`;}\r\n            case HTTPCommands.ChangePassword:       { return `/Profile/${ID}/ChangePassword`;}\r\n            case HTTPCommands.GetManageName:        { return `/Profile/${ID}/Manager`;}\r\n            case HTTPCommands.MakeRequest:          { return `/Request/${ID}`;}\r\n            case HTTPCommands.DeleteRequest:        { return `/Request/${ID}`;}\r\n            case HTTPCommands.GetAllSentRequest:    { return `/Request/${ID}`;}\r\n            case HTTPCommands.ManageChangeRequest:  { return `/Manager/${ID}`;}\r\n            case HTTPCommands.ManagerGetAllRequest: { return `/Manager/${ID}`;}\r\n            case HTTPCommands.AdminGetAllEmployees: { return `/Admin/${ID}`;}\r\n            case HTTPCommands.AdminAssignManager:   { return `/Admin/${ID}/Assign`;}\r\n            case HTTPCommands.AdminRemoveEmployee:  { return `/Admin/${ID}/UnAssign`;}\r\n            case HTTPCommands.AdminDeleteProfile:   { return `/Admin/${ID}`;}\r\n            case HTTPCommands.GetRecords:           { return `/Records`;}\r\n            default:                                { return `/Connect`;}\r\n        }\r\n    }\r\n    private CreateURL(Command:HTTPCommands,ID:string):string{\r\n        return `${this.TargetURL}:${this.PortNumber}${this.GetRoute(Command,ID)}`\r\n    }\r\n    //===================================================================\r\n    private async CreateHTTPRequest(Command:HTTPCommands, body:any, ID:string):Promise<AxiosResponse<any, any>>{\r\n        switch(Command){\r\n            case HTTPCommands.CreateProfile:        { return await Axios.post   (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.Login:                { return await Axios.post   (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.LogOut:               { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ChangeFirstName:      { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ChangeLastName:       { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ChangePassword:       { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.GetManageName:        { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.MakeRequest:          { return await Axios.post   (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.DeleteRequest:        { return await Axios.delete (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.GetAllSentRequest:    { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ManageChangeRequest:  { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.ManagerGetAllRequest: { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminGetAllEmployees: { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminAssignManager:   { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminRemoveEmployee:  { return await Axios.patch  (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.AdminDeleteProfile:   { return await Axios.delete (this.CreateURL(Command,ID), body);}\r\n            case HTTPCommands.GetRecords:           { return await Axios.get    (this.CreateURL(Command,ID), body);}\r\n            default:                                { return await Axios.get    (this.CreateURL(5000,ID), body);}\r\n        }\r\n    }\r\n\r\n    \r\n    // Helper Functions==========================================\r\n    /**Used tp check the connection to the server*/\r\n    async CheckConnection():Promise<boolean>{\r\n        const InputURL:string = `${this.TargetURL}:${this.PortNumber}/Connect`;\r\n        try {\r\n            const ReturnStuff = await Axios.get(InputURL);\r\n            if(   ReturnStuff.status <300  ){ return true};\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n        return false ;\r\n    }\r\n    /**Attempts to login the user*/ \r\n    async Login(UserID:string, password:string):Promise<LoginReturn> {\r\n        const Command:HTTPCommands=  HTTPCommands.Login ;\r\n        const body:any = {UserID, password, AuthenticationString:''} ; \r\n        const JsonBody = (await this.CreateHTTPRequest(Command,body, UserID)).data;\r\n        const LoginResult:LoginReturn = JsonBody;\r\n        this.UserID = LoginResult.ReturnProfile?.id ?? 'NullLogin';\r\n        this.AuthenticationString = LoginResult.AuthenticationString ?? '';\r\n        return LoginResult;\r\n        \r\n    }\r\n    /**Attempt to logout the user*/\r\n    async LogOut(UserID?:string, Authentication?:string):Promise<ResultReturnCheck>{\r\n        const body:any =this.AuthenticationString;\r\n        const Command:HTTPCommands=  HTTPCommands.LogOut;\r\n        const JsonBody:ResultReturnCheck = (await this.CreateHTTPRequest(Command,body, this.UserID)).data\r\n        return JsonBody;\r\n    }\r\n\r\n    async AdminGetAllEmployees():Promise<TransferProfileArray>{\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async AdminAssignManager(EmployeeID:string, ManagerID:string):Promise<ResultReturnCheck>{\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async AdminRemoveEmployeeAssignment(EmployeeID:string, ManagerID:string, AdminID:string):Promise<ResultReturnCheck> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async AdminDeleteProfile(EmployeeID:string):Promise<ResultReturnCheck>  {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    AdminCreateProfile(ProfileInit: HTTPCreateProfile, ManagerID: string): Promise<TransferProfile> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    // Manager functions==================================================================\r\n    async ManagerChangeRequest(ManagerID:string, RequestID:string, Type:RequestStatus, Message:string):Promise<TransferRequest> {\r\n        const Command:HTTPCommands=  HTTPCommands.ManageChangeRequest;\r\n        let body:ResultReturnMarkRequest ;\r\n        switch(Type){\r\n            case RequestStatus.Denied:    { body= { ReturnString:RequestID, Type:RequestStatus.Denied, AuthenticationString: (this.AuthenticationString),Message}; break }\r\n            case RequestStatus.Approved:    {body= { ReturnString:RequestID, Type:RequestStatus.Approved, AuthenticationString: (this.AuthenticationString),Message}; break }\r\n            default:   {  body= { ReturnString:RequestID, Type:RequestStatus.Pending, AuthenticationString: (this.AuthenticationString),Message} ; break }\r\n        }\r\n        const ResultReturnRequest:TransferRequest = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnRequest;\r\n    }\r\n    async ManagerGetAllRequest(ManagerID:string):Promise<TransferRequestArray> {\r\n        const Command:HTTPCommands=  HTTPCommands.ManagerGetAllRequest ;\r\n        const body ={}\r\n        let ResultReturnRequest:TransferRequestArray= (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}`)).data;\r\n        return ResultReturnRequest\r\n    }\r\n    async ManagerGetRecords(): Promise<TransferRecords> {\r\n        const Command:HTTPCommands=  HTTPCommands.GetRecords ;\r\n        const body={};\r\n        const ReturnRecord:TransferRecords= (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ReturnRecord;\r\n    }\r\n    /**Used to initialize a new account and also login the user*/\r\n    async CreateProfile(ProfileInit:HTTPCreateProfile):Promise<LoginReturn> {\r\n        const Command:HTTPCommands=  HTTPCommands.CreateProfile ;\r\n        const body:HTTPCreateProfile = {... ProfileInit} ; \r\n        const LoginFound:LoginReturn = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        console.log( \"Profile Creation return JSON: \",JSON.stringify(LoginFound.ReturnProfile.id));\r\n        this.UserID = LoginFound.ReturnProfile.id ?? ''\r\n        this.AuthenticationString = LoginFound.AuthenticationString?? ''\r\n        return LoginFound;\r\n    }\r\n    /**Used to change first name*/\r\n    async ChangeFirstName( NewFirstName:string, EmployeeID?:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.ChangeFirstName ;\r\n        const body:ResultReturnStringID = {ReturnString:NewFirstName, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    /**Use tp change last name*/\r\n    async ChangeLastName( NewLastName:string, EmployeeID?:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.ChangeLastName ;\r\n        const body:ResultReturnStringID = {ReturnString: NewLastName, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    /**Used to change password*/\r\n    async ChangePassword(NewPassword:string, EmployeeID?:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.ChangeLastName ;\r\n        const body:ResultReturnStringID = {ReturnString: NewPassword, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    /**Use to get manager name*/\r\n    async GetManagerName(ManagerID:string):Promise<ResultReturnString> {\r\n        const Command:HTTPCommands=  HTTPCommands.GetManageName;\r\n        const body:ResultReturnStringID = {ReturnString: ManagerID, AuthenticationString: (this.AuthenticationString) }\r\n        const ResultReturnString:ResultReturnString = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnString;\r\n    }\r\n    async MakeRequest(EmployeeID:string, Amount:number, Message:string):Promise<TransferRequest> {\r\n        const Command:HTTPCommands=  HTTPCommands.MakeRequest ;\r\n        const body:MakeRequestForm = {Amount, Message, AuthenticationString: (this.AuthenticationString)}\r\n        const ResultReturnRequest:TransferRequest = (await this.CreateHTTPRequest(Command, body, this.UserID)).data;\r\n        return ResultReturnRequest;\r\n    }/**use to mark a request s deleted*/\r\n    async DeleteRequest(EmployeeID:string, RequestID:string):Promise<ResultReturnCheck> {\r\n        const Command:HTTPCommands=  HTTPCommands.DeleteRequest;\r\n        const authenticationString = this.AuthenticationString\r\n        const ResultReturn:ResultReturnCheck = (await this.CreateHTTPRequest(Command, {}, `${this.UserID}/${authenticationString}/${RequestID}`)).data;\r\n        return ResultReturn;\r\n    }\r\n    async GetAllSentRequestOfType(IDstring:string, Type:RequestStatus):Promise<TransferRequestArray> {\r\n        const Command:HTTPCommands=  HTTPCommands.GetAllSentRequest ;\r\n        const body ={}\r\n        let ResultReturnRequest:TransferRequestArray;\r\n        switch(Type){\r\n            case 0:{return (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${0}`)).data;}\r\n            case 1:{return  (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${1}`)).data;}\r\n            case 2:{return  (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${2}`)).data;}\r\n            default : {return  (await this.CreateHTTPRequest(Command, body, `${this.UserID}/${this.AuthenticationString}/${4}`)).data;}\r\n        }\r\n    }\r\n\r\n}","import { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport NoConnectionScreen from './components/page/NoConnectionScreen';\r\nimport SuperProvider from './components/wrappers/wProviderWrapper';\r\n\r\nexport default function App() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <SuperProvider>\r\n        <NoConnectionScreen/>\r\n      </SuperProvider>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#045',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"sourceRoot":""}